<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HBase on Smart Tiger&#39;s blog</title>
    <link>https://eoriented.github.io/tags/hbase/</link>
    <description>Recent content in HBase on Smart Tiger&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>eoriented@gmail.com (eoriented)</managingEditor>
    <webMaster>eoriented@gmail.com (eoriented)</webMaster>
    <lastBuildDate>Tue, 08 Dec 2020 22:35:38 +0900</lastBuildDate>
    
	<atom:link href="https://eoriented.github.io/tags/hbase/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[HBase] Scanner Caching vs Batching</title>
      <link>https://eoriented.github.io/post/hbase-caching-vs-batching/</link>
      <pubDate>Tue, 08 Dec 2020 22:35:38 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/hbase-caching-vs-batching/</guid>
      <description>HBase는 데이터베이스 시스템에서의 커서와 유사한 스캔 기능을 제공합니다. 스캔은 HBase에서 순차적이고 정렬된 저장 구조를 활용하는 방식입니다. 스캔을 사용하면 로우 키를 기반으로 하여 여러 데이터를 가져올 수 있습니다. 스캔은 로우 키가 정확히 일치하지 않아도 사용이 가능합니다.</description>
    </item>
    
    <item>
      <title>HBase client API</title>
      <link>https://eoriented.github.io/post/hbase-client-api-basics/</link>
      <pubDate>Sun, 22 Nov 2020 09:31:21 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/hbase-client-api-basics/</guid>
      <description>HBase에 접근하기 위한 주요 인터페이스는 org.apache.hadoop.hbase.client의 HTable 클래스입니다. HTable 클래스를 통해서 HBase에 데이터를 저장하고 삭제하는 등 사용자 작업에 필요한 기능을 제공합니다. HBase에서 데이터를 변경하는 로우 단위의 모든 작업은 원자성(Atomic)이 보장됩니다. 원자성이 보장된다는 말은 무슨 의미일까요? 하나의 로우에 읽기나 쓰기 작업이 수행되는 동일 다른 클라이언트나 스레드에서 동일한 로우에 읽기나 쓰기를 시도해도 아무런 문제가 발생하지 않는다는 의미입니다.</description>
    </item>
    
    <item>
      <title>HBase 데이터 모델</title>
      <link>https://eoriented.github.io/post/hbase-data-model/</link>
      <pubDate>Mon, 06 Apr 2020 23:01:48 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/hbase-data-model/</guid>
      <description>이번 포스트에서는 HBase의 데이터 모델에 대해 살펴볼 예정입니다.
먼저 데이터 모델이란 무엇일까요? 데이터 모델이란 데이터를 인식하고 조작하는데 사용되는 모델을 말합니다.
데이터베이스를 사용하는 사람에게 데이터 모델은 데이터베이스 내의 데이터와 상호작용하는 방법을 이야기하는 것입니다.
HBase에서 데이터 모델을 어떻게 표현하는지 살펴보기 전에 HBase에서 사용하는 용어를 먼저 살펴보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>저장소(Storage)와 검색(Retrieval) - 2</title>
      <link>https://eoriented.github.io/post/storage-and-retrieval-2/</link>
      <pubDate>Wed, 21 Aug 2019 22:56:25 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/storage-and-retrieval-2/</guid>
      <description>이전 포스트에 이어서 저장소와 검색을 계속 살펴보겠습니다. 이전 포스트 마지막 부분에 대한 설명은 해시 테이블을 통한 색인이 가진 제한사항에 대해 살펴보았습니다. 이러한 제한이 없는 색인 구조를 이어서 살펴보도록 하겠습니다.
SS 테이블과 LSM 트리   위 그림과 같이 log-structured 저장소 세그먼트는 key-value 쌍의 시퀀스입니다.</description>
    </item>
    
  </channel>
</rss>