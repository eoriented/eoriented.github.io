<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>우지 on Smart Tiger&#39;s blog</title>
    <link>https://eoriented.github.io/tags/%EC%9A%B0%EC%A7%80/</link>
    <description>Recent content in 우지 on Smart Tiger&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>eoriented@gmail.com (eoriented)</managingEditor>
    <webMaster>eoriented@gmail.com (eoriented)</webMaster>
    <lastBuildDate>Sun, 01 Oct 2017 11:35:48 +0900</lastBuildDate>
    
	<atom:link href="https://eoriented.github.io/tags/%EC%9A%B0%EC%A7%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Oozie Workflow Pattern 3</title>
      <link>https://eoriented.github.io/post/oozie-workflow-pattern-3/</link>
      <pubDate>Sun, 01 Oct 2017 11:35:48 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/oozie-workflow-pattern-3/</guid>
      <description>이전 포스트에는 Oozie의 워크플로우 패턴중 하나인 fork-and-join 패턴에 관해서 알아보았습니다. 이번 시간에는 워크플로우 내에 액션의 결과에 조건을 주어 다음 액션을 어디로 수행할 것인지 결정할 수 있는 capture-and-decide 패턴에 대해 알아보도록 하겠습니다.
capture-and-decide pattern capture-and-decide 패턴이라고 하니까 약간 어려운 느낌이 있지만 실제로는 간단한 패턴이죠.</description>
    </item>
    
    <item>
      <title>Oozie Workflow Pattern - 2</title>
      <link>https://eoriented.github.io/post/oozie-workflow-pattern-2/</link>
      <pubDate>Sat, 30 Sep 2017 14:19:26 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/oozie-workflow-pattern-2/</guid>
      <description>이전 포스트에는 Oozie의 워크플로우 패턴중 하나인 Point-to-Point 패턴에 관해서 알아보았습니다. 이번 시간에는 fork-and-join 패턴에 대해 알아보도록 하겠습니다.
fork-and-join pattern fork-and-join 패턴은 Fan-out 패턴이라고도 합니다. 이와 같은 형태의 워크플로우는 여러 액션들이 나누어 실행한 후 해당 액션들이 다 정상적으로 완료된 후 다음 액션을 수행해야하는 경우 많이 사용합니다.</description>
    </item>
    
    <item>
      <title>Oozie Workflow Pattern - 1</title>
      <link>https://eoriented.github.io/post/oozie-workflow-pattern-1/</link>
      <pubDate>Sun, 24 Sep 2017 15:06:15 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/oozie-workflow-pattern-1/</guid>
      <description>Oozie가 무엇인지 궁금한 분들을 Apache Oozie 소개라는 이전 포스트를 참고하시기 바랍니다. 일반적으로 Oozie에서 많이 사용되는 워크플로우 패턴에 대해서 알아봅시다.
순차적 액션 수행 (Point-to-Point Pattern) 가장 간단한 형태로 수행하는 워크플로우 형태가 되겠습니다. 말그대로 순차적으로 액션을 수행할 때 사용합니다.</description>
    </item>
    
    <item>
      <title>Apache Oozie 소개</title>
      <link>https://eoriented.github.io/post/introduction-to-oozie/</link>
      <pubDate>Sat, 23 Sep 2017 23:15:56 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/introduction-to-oozie/</guid>
      <description>Oozie 개요 Oozie는 정식 홈페이지에 나와 있듯이 Hadoop ecosystem에서 사용하는 Workflow Scheduler(혹은 orchestration) 프레임워크입니다. Oozie에서 제공하는 기능은 크게 아래의 3가지와 같습니다.
 Scheduling  특정 시간에 액션 수행 주기적인 간격 이후에 액션 수행 이벤트가 발생하면 액션 수행   Coordinating  이전 액션이 성공적으로 끝나면 다음 액션 시작   Managing  액션이 성공하거나 실패했을 때 이메일 발송 액션 수행시간이나 액션의 단계를 저장    Oozie 용어  Action  우지에서 실행할 수 있는 하나의 작업 단위 MapReduce 작업, Spark 작업, Shell script 등   Workflow  Action들의 제어와 의존 관계를 DAG(Directed acyclic graph) 표현   Coordinator  Data sets과 Workflow를 실행하는 스케줄을 정의   Bundle  코디네이터의 모임    Oozie Architecture  우지는 Client-Server Model의 형태입니다.</description>
    </item>
    
  </channel>
</rss>