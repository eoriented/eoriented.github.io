<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>색인 on Smart Tiger&#39;s blog</title>
    <link>https://eoriented.github.io/tags/%EC%83%89%EC%9D%B8/</link>
    <description>Recent content in 색인 on Smart Tiger&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>eoriented@gmail.com (eoriented)</managingEditor>
    <webMaster>eoriented@gmail.com (eoriented)</webMaster>
    <lastBuildDate>Sat, 14 Nov 2020 21:04:28 +0900</lastBuildDate>
    
	<atom:link href="https://eoriented.github.io/tags/%EC%83%89%EC%9D%B8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>파티셔닝(Partitioning) - 2</title>
      <link>https://eoriented.github.io/post/partitioning-2/</link>
      <pubDate>Sat, 14 Nov 2020 21:04:28 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/partitioning-2/</guid>
      <description>이전 포스트에 이어서 파티셔닝에서 사용하는 리밸런싱 기법에 관해 살펴보고, 클라이언트에서 질의 요청을 어떻게 처리할 것인지에 관해 알아보겠습니다.
파티션 리밸런싱 리밸런싱이란 클러스터에서 한 노드가 담당하던 부하를 다른 노드를 옮기는 과정입니다. 이러한 리밸런싱이 필요한 경우는 시간이 지나면서 데이터베이스에 변화가 생기기 때문입니다.</description>
    </item>
    
    <item>
      <title>파티셔닝(Partitioning) - 1</title>
      <link>https://eoriented.github.io/post/partitioning-1/</link>
      <pubDate>Sat, 14 Nov 2020 12:05:31 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/partitioning-1/</guid>
      <description>데이터셋이 매우 크거나 질의 처리량이 매우 높은 경우 데이터를 파티션으로 쪼개야 합니다. 이번 포스트에서 이야기하는 파티셔닝은 대용량 데이터베이스에서 데이터를 작은 단위로 쪼개는 방법을 말합니다. 몽고DB, 엘라스틱서치, 솔라에서는 샤드라고 하며 HBase에서는 리전, 빅테이블에서는 태블릿(tablet), 카산드라와 리악에서는 vnode, 카우치베이스에서 vBucker이라고 부릅니다.</description>
    </item>
    
    <item>
      <title>저장소(Storage)와 검색(Retrieval) - 3</title>
      <link>https://eoriented.github.io/post/storage-and-retrieval-3/</link>
      <pubDate>Mon, 26 Aug 2019 22:56:19 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/storage-and-retrieval-3/</guid>
      <description>이전 포스트에 이어서 세 번째 포스트입니다. 이전 포스트에서는 SS테이블과 LSM 트리에 관해 알아보았습니다. 이번 포스트에서는 데이터베이스에서 가장 많이 사용하고 일반적인 색인 유형인 B 트리에 대해서 살펴보겠습니다.
B 트리 B 트리는 거의 대부분의 관계형 데이터베이스에서 표준 색인 구현으로 사용할 뿐만 아니라 비관계형 데이터에서도 사용합니다.</description>
    </item>
    
    <item>
      <title>저장소(Storage)와 검색(Retrieval) - 1</title>
      <link>https://eoriented.github.io/post/storage-and-retrieval-1/</link>
      <pubDate>Sun, 18 Aug 2019 22:11:51 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/storage-and-retrieval-1/</guid>
      <description>이전 포스트에서는 데이터 모델과 질의 언어에 대해 알아보았습니다. 예를 들어 애플리케이션 개발자 관점에서 데이터베이스에 저장하는 데이터 포맷과 데이터를 다시 요청하는 메커니즘과 같은 것들을 살펴보았습니다. 이번 장에서는 데이터베이스 관점에서 데이터를 저장하는 방법과 데이터를 요청했을 때 다시 찾을 수 있는 방법에 대해서 살펴볼 예정입니다.</description>
    </item>
    
  </channel>
</rss>