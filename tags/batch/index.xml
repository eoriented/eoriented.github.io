<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>batch on Smart Tiger&#39;s blog</title>
    <link>https://eoriented.github.io/tags/batch/</link>
    <description>Recent content in batch on Smart Tiger&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>eoriented@gmail.com (eoriented)</managingEditor>
    <webMaster>eoriented@gmail.com (eoriented)</webMaster>
    <lastBuildDate>Sat, 19 Dec 2020 15:06:33 +0900</lastBuildDate>
    
	<atom:link href="https://eoriented.github.io/tags/batch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>스트리밍의 첫걸음 - 데이터 스트리밍 처리의 개념 정리</title>
      <link>https://eoriented.github.io/post/streaming-101/</link>
      <pubDate>Sat, 19 Dec 2020 15:06:33 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/streaming-101/</guid>
      <description>스트리밍 처리의 중요성이 점점 중요해지고 있습니다. Apache Spark Streaming부터 새로운 스트림 처리의 강자인 Apache Flink와 같은 스트리밍 처리 엔진 등의 사용 사례가 많아지고 있습니다. 그래서 이번 기회에 스트리밍 처리에 대한 기본 개념들에 대해 정리해보고자 합니다.</description>
    </item>
    
    <item>
      <title>[HBase] Scanner Caching vs Batching</title>
      <link>https://eoriented.github.io/post/hbase-caching-vs-batching/</link>
      <pubDate>Tue, 08 Dec 2020 22:35:38 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/hbase-caching-vs-batching/</guid>
      <description>HBase는 데이터베이스 시스템에서의 커서와 유사한 스캔 기능을 제공합니다. 스캔은 HBase에서 순차적이고 정렬된 저장 구조를 활용하는 방식입니다. 스캔을 사용하면 로우 키를 기반으로 하여 여러 데이터를 가져올 수 있습니다. 스캔은 로우 키가 정확히 일치하지 않아도 사용이 가능합니다.</description>
    </item>
    
    <item>
      <title>배치 프로세싱(Batch processing) - 2</title>
      <link>https://eoriented.github.io/post/batch-procession-2/</link>
      <pubDate>Fri, 02 Oct 2020 22:28:51 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/batch-procession-2/</guid>
      <description>조인 여러 데이터셋에서 한 레코드가 다른 레코드와 연관되어 있는 것은 일반적입니다. 관계형 모델에서는 외래키, 문서 모델에서는 문서 참조, 그래프 모델에서는 간선이라고 부릅니다. 비정규화를 통해서 이러한 조인을 줄일 수는 있지만 완전한 제거는 어렵습니다. 배치 처리에서의 조인은 데이터셋 내의 모든 연관 관계를 다루는 것을 의미합니다.</description>
    </item>
    
    <item>
      <title>배치 프로세싱(Batch processing) - 1</title>
      <link>https://eoriented.github.io/post/batch-processing-1/</link>
      <pubDate>Mon, 20 Jul 2020 23:06:22 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/batch-processing-1/</guid>
      <description>배치 처리는 컴퓨터 연산의 오래된 형태 중에 하나입니다. 이미 배치 처리는 예전 부터 사용했습니다. 2004년에 발표된 구글의 맵리듀스는 과거 미국 인구 조사에서 천공 카드 집계기를 이용한 집계 처리와 유사합니다. 이와 같이 배치 처리는 입력 데이터로 집계 처리해서 결과를 보여줍니다.</description>
    </item>
    
    <item>
      <title>스트림 프로세싱(Stream Processing) - 1</title>
      <link>https://eoriented.github.io/post/stream-processing/</link>
      <pubDate>Sun, 05 Jul 2020 23:00:39 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/stream-processing/</guid>
      <description>일반적으로 배치 처리의 문제점은 입력의 변화가 특정 기간이 끝나야 반영이 되는 문제가 있습니다. 이러한 지연(Lag)을 줄이려면 더 자주 실행할 수 있도록 해야 합니다. 고정된 타임 슬라이스 별로 처리하는 것이 아닌 이벤트가 발생할 때마다 처리하도록 하는 것입니다.</description>
    </item>
    
  </channel>
</rss>