<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>index on Smart Tiger&#39;s blog</title>
    <link>https://eoriented.github.io/tags/index/</link>
    <description>Recent content in index on Smart Tiger&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>eoriented@gmail.com (eoriented)</managingEditor>
    <webMaster>eoriented@gmail.com (eoriented)</webMaster>
    <lastBuildDate>Sat, 14 Nov 2020 21:04:28 +0900</lastBuildDate>
    
	<atom:link href="https://eoriented.github.io/tags/index/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>파티셔닝(Partitioning) - 2</title>
      <link>https://eoriented.github.io/post/partitioning-2/</link>
      <pubDate>Sat, 14 Nov 2020 21:04:28 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/partitioning-2/</guid>
      <description>이전 포스트에 이어서 파티셔닝에서 사용하는 리밸런싱 기법에 관해 살펴보고, 클라이언트에서 질의 요청을 어떻게 처리할 것인지에 관해 알아보겠습니다.
파티션 리밸런싱 리밸런싱이란 클러스터에서 한 노드가 담당하던 부하를 다른 노드를 옮기는 과정입니다. 이러한 리밸런싱이 필요한 경우는 시간이 지나면서 데이터베이스에 변화가 생기기 때문입니다.</description>
    </item>
    
    <item>
      <title>파티셔닝(Partitioning) - 1</title>
      <link>https://eoriented.github.io/post/partitioning-1/</link>
      <pubDate>Sat, 14 Nov 2020 12:05:31 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/partitioning-1/</guid>
      <description>데이터셋이 매우 크거나 질의 처리량이 매우 높은 경우 데이터를 파티션으로 쪼개야 합니다. 이번 포스트에서 이야기하는 파티셔닝은 대용량 데이터베이스에서 데이터를 작은 단위로 쪼개는 방법을 말합니다. 몽고DB, 엘라스틱서치, 솔라에서는 샤드라고 하며 HBase에서는 리전, 빅테이블에서는 태블릿(tablet), 카산드라와 리악에서는 vnode, 카우치베이스에서 vBucker이라고 부릅니다.</description>
    </item>
    
  </channel>
</rss>