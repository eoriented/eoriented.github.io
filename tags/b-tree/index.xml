<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>B-Tree on Smart Tiger&#39;s blog</title>
    <link>https://eoriented.github.io/tags/b-tree/</link>
    <description>Recent content in B-Tree on Smart Tiger&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>eoriented@gmail.com (eoriented)</managingEditor>
    <webMaster>eoriented@gmail.com (eoriented)</webMaster>
    <lastBuildDate>Sat, 03 Apr 2021 22:12:02 +0900</lastBuildDate>
    
	<atom:link href="https://eoriented.github.io/tags/b-tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>로그 구조 스토리지(Log Structured Storage)</title>
      <link>https://eoriented.github.io/post/log-structured-storage/</link>
      <pubDate>Sat, 03 Apr 2021 22:12:02 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/log-structured-storage/</guid>
      <description>회계사는 기록을 수정해야 하면 이미 입력된 값을 지우지 않고 새로운 값을 다시 씁니다. 최종 결과를 구하려면 모든 항목을 재검토하고 합계액을 계산해야 합니다. 이러한 방식은 바로 오늘 포스트에서 살펴볼 로그 구조 스토리지(Log-Structured Storage)와 유사합니다.
또 다른 예로는 불변 스토리지(immutable storage)가 있습니다.</description>
    </item>
    
    <item>
      <title>저장소(Storage)와 검색(Retrieval) - 3</title>
      <link>https://eoriented.github.io/post/storage-and-retrieval-3/</link>
      <pubDate>Mon, 26 Aug 2019 22:56:19 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/storage-and-retrieval-3/</guid>
      <description>이전 포스트에 이어서 세 번째 포스트입니다. 이전 포스트에서는 SS테이블과 LSM 트리에 관해 알아보았습니다. 이번 포스트에서는 데이터베이스에서 가장 많이 사용하고 일반적인 색인 유형인 B 트리에 대해서 살펴보겠습니다.
B 트리 B 트리는 거의 대부분의 관계형 데이터베이스에서 표준 색인 구현으로 사용할 뿐만 아니라 비관계형 데이터에서도 사용합니다.</description>
    </item>
    
  </channel>
</rss>