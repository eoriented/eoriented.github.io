<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Smart Tiger&#39;s blog</title>
    <link>https://eoriented.github.io/post/</link>
    <description>Recent content in Posts on Smart Tiger&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>eoriented@gmail.com (eoriented)</managingEditor>
    <webMaster>eoriented@gmail.com (eoriented)</webMaster>
    <lastBuildDate>Sat, 14 Mar 2020 22:15:26 +0900</lastBuildDate>
    
	<atom:link href="https://eoriented.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spark에서 groupByKey 대신 reduceByKey 사용하기</title>
      <link>https://eoriented.github.io/post/avoid-groupbykey/</link>
      <pubDate>Sat, 14 Mar 2020 22:15:26 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/avoid-groupbykey/</guid>
      <description>이번 포스트에서는 스파크에서 빈번히 사용되는 transformation인 reduceByKey와 groupByKey의 동작에 대해 살펴보겠습니다. 먼저 스파크에서 reduceByKey와 groupByKey를 사용하여 단어 세기 예제를 작성해보도록 하겠습니다.
val words = Array(&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34;, &amp;#34;three&amp;#34;, &amp;#34;three&amp;#34;) val wordPairsRDD = sc.parallelize(words).map(word =&amp;gt; (word, 1)) val wordCountsWithReduce = wordPairsRDD .</description>
    </item>
    
    <item>
      <title>Introduction to Kafka</title>
      <link>https://eoriented.github.io/post/introduction-to-kafka/</link>
      <pubDate>Thu, 12 Mar 2020 21:07:27 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/introduction-to-kafka/</guid>
      <description>1. Apache Kafka 아파치 카프카(이하 카프카)는 여러 대의 분산 서버에서 대량의 데이터를 처리하는 분산 메시징 시스템입니다.
  카프카는 여러 시스템과 장치를 연결하는 중요한 역할을 수행합니다. 카프카는 높은 처리량과 실시간 처리를 할 수 있습니다. 이러한 카프카는 다음의 4가지 특징을 가지고 있습니다.</description>
    </item>
    
    <item>
      <title>Docker and Container</title>
      <link>https://eoriented.github.io/post/docker-and-container/</link>
      <pubDate>Sun, 16 Feb 2020 15:21:35 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/docker-and-container/</guid>
      <description>Container 먼저 컨테이너란 무엇일까요? 컨테이너는 Docker의 정식 홈페이지에서 다음과 같이 정의하고 있습니다.
 Package Software into Standardized Units for Development, Shipment and Deployment
 컨테이너는 애플리케이션에게 격리된 실행 환경을 제공해주는 가상화 기술입니다. 컨테이너 단위로 OS, Library, Application을 패키징 할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Git 명령어 요약 정리 (Cheat sheet)</title>
      <link>https://eoriented.github.io/post/git-cheat-sheet/</link>
      <pubDate>Sat, 27 Jul 2019 17:06:56 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/git-cheat-sheet/</guid>
      <description>git은 오늘날 가장 많이 사용하는 버전 관리 시스템 중 하나입니다. 오늘은 git의 자주 사용하는 명령어에 대해서 살펴보고자 합니다. 먼저 각 명령어에 따른 흐름이 어떻게 변하는지 다음 그림을 통해 알 수 있습니다.
  생성하기   새로운 로컬 저장소를 생성하기</description>
    </item>
    
    <item>
      <title>딥러닝(Deep Learning) 살펴보기 2탄</title>
      <link>https://eoriented.github.io/post/deep-learning-overview-2/</link>
      <pubDate>Sat, 07 Oct 2017 15:00:00 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/deep-learning-overview-2/</guid>
      <description>지난 포스트에 Deep learning 살펴보기 1탄을 통해 딥러닝의 개요와 뉴럴 네트워크, 그리고 Underfitting의 문제점과 해결방법에 관해 알아보았습니다. 그럼 오늘은 이어서 Deep learning에서 학습이 느린 문제점을 어떠한 방식으로 해결하고 연구하고 있는지 한번 알아보도록 하겠습니다.
Neural Network 복습 기존의 뉴럴 네트워크는 weight parameter들을 최적화(optimize)를 하기 위하여 Gradient Descent 방법을 사용했습니다.</description>
    </item>
    
    <item>
      <title>딥러닝(Deep Learning) 살펴보기 1탄</title>
      <link>https://eoriented.github.io/post/deep-learning-overview-1/</link>
      <pubDate>Sun, 01 Oct 2017 13:04:48 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/deep-learning-overview-1/</guid>
      <description>이번 포스트에서는 Deep learning에 대해 살펴볼 예정입니다. 이번 포스트는 Reference에 있는 내용을 정리한 것입니다. Deep learning은 대세가 되었습니다. 주변에서 딥러닝이라는 이야기가 많이 들립니다. 딥러닝이란 무엇인지 알아보도록 하겠습니다. 오늘날 딥러닝을 가능하게 해준 3가지가 있습니다.
 빅데이터  데이터가 많은게 깡패입니다.</description>
    </item>
    
    <item>
      <title>Apache Oozie 알아보기</title>
      <link>https://eoriented.github.io/post/introduction-to-oozie/</link>
      <pubDate>Sat, 23 Sep 2017 23:15:56 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/introduction-to-oozie/</guid>
      <description>Oozie 개요 Oozie는 정식 홈페이지에 나와 있듯이 Hadoop ecosystem에서 사용하는 Workflow Scheduler(혹은 orchestration) 프레임워크입니다. Oozie에서 제공하는 기능은 크게 아래의 3가지와 같습니다.
 Scheduling  특정 시간에 액션 수행 주기적인 간격 이후에 액션 수행 이벤트가 발생하면 액션 수행   Coordinating  이전 액션이 성공적으로 끝나면 다음 액션 시작   Managing  액션이 성공하거나 실패했을 때 이메일 발송 액션 수행시간이나 액션의 단계를 저장    Oozie 용어  Action  우지에서 실행할 수 있는 하나의 작업 단위 MapReduce 작업, Spark 작업, Shell script 등   Workflow  Action들의 제어와 의존 관계를 DAG(Directed acyclic graph) 표현   Coordinator  Data sets과 Workflow를 실행하는 스케줄을 정의   Bundle  코디네이터의 모임    Oozie Architecture  우지는 Client-Server Model의 형태입니다.</description>
    </item>
    
    <item>
      <title>gcc로 컴파일하는 방법</title>
      <link>https://eoriented.github.io/post/how-to-compile-using-gcc/</link>
      <pubDate>Fri, 15 May 2009 10:36:10 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/how-to-compile-using-gcc/</guid>
      <description>1. gcc 동작 과정   gcc
원래는 GNU C Compiler를 의미 했지만 1999년부터 GNU Compiler Collection을 의미한다.
  gcc가 실행시키는 프로그램
         cpp 전처리기   cc1 컴파일러   as 어셈블러   ld 링커    1) 전처리 단계</description>
    </item>
    
  </channel>
</rss>