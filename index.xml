<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smart Tiger&#39;s blog</title>
    <link>https://eoriented.github.io/</link>
    <description>Recent content on Smart Tiger&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>eoriented@gmail.com (eoriented)</managingEditor>
    <webMaster>eoriented@gmail.com (eoriented)</webMaster>
    <lastBuildDate>Sun, 08 Mar 2020 21:18:14 +0900</lastBuildDate>
    
	<atom:link href="https://eoriented.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functor(펑터)와 Monad(모나드) - 2</title>
      <link>https://eoriented.github.io/post/functor-and-monad-2/</link>
      <pubDate>Thu, 14 May 2020 10:04:25 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/functor-and-monad-2/</guid>
      <description>이전 포스트에서는 펑터가 무엇인지에 관해 살펴보았습니다. 펑터는 유용한 추상화이지만 약간의 문제가 존재합니다. 펑터의 map 함수가 일반적인 값을 반환하는 경우에는 문제가 되지 않지만 만약 펑터를 반환하면 어떻게 될까요? 물론 펑터 역시 값이기 때문에 상관은 없겠지만 펑터를 반환하는 경우 결과가 조금 다르게 나올 수 있습니다.</description>
    </item>
    
    <item>
      <title>Functor(펑터)와 Monad(모나드) - 1</title>
      <link>https://eoriented.github.io/post/functor-and-monad-1/</link>
      <pubDate>Sun, 10 May 2020 13:18:56 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/functor-and-monad-1/</guid>
      <description>스칼라 언어를 주로 사용하고 있는 입장에서 펑터나 모나드와 같은 용어를 종종 접하게 됩니다. 그래서 이번 포스트에서는 펑터와 모나드가 무엇인지에 대해 살펴보겠습니다. 일반적으로 대부분의 프로그래머들은, 특히 함수형 언어로 개발을 하지 않는 개발자들은, 모나드란 단어를 보았을 때, 자신과는 무관한 컴퓨터 프로그래밍 개념이고 상관없는 것이라고 생각하고 그냥 지나칠 수 있습니다.</description>
    </item>
    
    <item>
      <title>HBase 데이터 모델</title>
      <link>https://eoriented.github.io/post/hbase-data-model/</link>
      <pubDate>Mon, 06 Apr 2020 23:01:48 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/hbase-data-model/</guid>
      <description>이번 포스트에서는 HBase의 데이터 모델에 대해 살펴볼 예정입니다.
먼저 데이터 모델이란 무엇일까요? 데이터 모델이란 데이터를 인식하고 조작하는데 사용되는 모델을 말합니다.
데이터베이스를 사용하는 사람에게 데이터 모델은 데이터베이스 내의 데이터와 상호작용하는 방법을 이야기하는 것입니다.
HBase에서 데이터 모델을 어떻게 표현하는지 살펴보기 전에 HBase에서 사용하는 용어를 먼저 살펴보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>Spark에서 groupByKey 대신 reduceByKey 사용하기</title>
      <link>https://eoriented.github.io/post/avoid-groupbykey/</link>
      <pubDate>Sat, 14 Mar 2020 22:15:26 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/avoid-groupbykey/</guid>
      <description>이번 포스트에서는 스파크에서 빈번히 사용되는 transformation인 reduceByKey와 groupByKey의 동작에 대해 살펴보겠습니다. 먼저 스파크에서 reduceByKey와 groupByKey를 사용하여 단어 세기 예제를 작성해보도록 하겠습니다.
val words = Array(&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34;, &amp;#34;three&amp;#34;, &amp;#34;three&amp;#34;) val wordPairsRDD = sc.parallelize(words).map(word =&amp;gt; (word, 1)) val wordCountsWithReduce = wordPairsRDD .</description>
    </item>
    
    <item>
      <title>Introduction to Kafka</title>
      <link>https://eoriented.github.io/post/introduction-to-kafka/</link>
      <pubDate>Thu, 12 Mar 2020 21:07:27 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/introduction-to-kafka/</guid>
      <description>1. Apache Kafka 아파치 카프카(이하 카프카)는 여러 대의 분산 서버에서 대량의 데이터를 처리하는 분산 메시징 시스템입니다.
  카프카는 여러 시스템과 장치를 연결하는 중요한 역할을 수행합니다. 카프카는 높은 처리량과 실시간 처리를 할 수 있습니다. 이러한 카프카는 다음의 4가지 특징을 가지고 있습니다.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://eoriented.github.io/about/</link>
      <pubDate>Sun, 08 Mar 2020 21:18:14 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/about/</guid>
      <description>PROFILE  Over eight years of experience in programming using Scala, Java, Python Worked on building and maintaining big data engineering and analytics system using Spark, Hadoop, Akka, Kafka, HBase, MongoDB  EXPERIENCE Naver Aug, 2016 - Present Data Engineer / Software Engineer</description>
    </item>
    
    <item>
      <title>Docker and Container</title>
      <link>https://eoriented.github.io/post/docker-and-container/</link>
      <pubDate>Sun, 16 Feb 2020 15:21:35 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/docker-and-container/</guid>
      <description>Container 먼저 컨테이너란 무엇일까요? 컨테이너는 Docker의 정식 홈페이지에서 다음과 같이 정의하고 있습니다.
 Package Software into Standardized Units for Development, Shipment and Deployment
 컨테이너는 애플리케이션에게 격리된 실행 환경을 제공해주는 가상화 기술입니다. 컨테이너 단위로 OS, Library, Application을 패키징 할 수 있습니다.</description>
    </item>
    
    <item>
      <title>스칼라 퓨처(Future)와 동시성(Concurrency) - 2</title>
      <link>https://eoriented.github.io/post/scala-future-and-concurrency-2/</link>
      <pubDate>Sat, 17 Aug 2019 11:11:46 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/scala-future-and-concurrency-2/</guid>
      <description>이전 포스트에 이어서 스칼라 Future의 다른 사용법에 대해 살펴보도록 하겠습니다.
4. Future 실패 처리하기 스칼라 Future는 실패한 퓨처를 다룰 수 있는 failed, fallBackTo, recover, recoverWith 메소드를 제공합니다.
4.1 failed Future[T]에서 실패한 Future를 예외를 저장한 Future[Throwable] 타입의 성공한 Future로 바꿔줍니다.</description>
    </item>
    
    <item>
      <title>스칼라 퓨처(Future)와 동시성(Concurrency) - 1</title>
      <link>https://eoriented.github.io/post/scala-future-and-concurrency-1/</link>
      <pubDate>Fri, 16 Aug 2019 23:04:42 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/scala-future-and-concurrency-1/</guid>
      <description>오늘 멀티 코어 프로세서가 대중화되면서 동시성에 대한 관심도 많이 늘어났습니다. 이러한 동시성 프로그래밍을 위해서 기존의 프로그래밍 언어들을 블로킹을 사용하여 동기화함으로써 동시성을 지원합니다. 자바의 경우도 마찬가지로 공유 메모리와 락을 기반으로 동시성을 지원하고 있습니다. 그러나 이러한 블로킹을 사용한 동기화의 경우 Deadlock이나 Starvation과 같은 문제가 발생할 수 있습니다.</description>
    </item>
    
    <item>
      <title>데이터 모델(Data Models)과 질의 언어(Query Languages) - 1</title>
      <link>https://eoriented.github.io/post/data-models-and-query-languages-1/</link>
      <pubDate>Wed, 31 Jul 2019 15:06:14 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/data-models-and-query-languages-1/</guid>
      <description>데이터 모델은 소프트웨어 개발에 있어서 가장 중요한 부분 중에 하나입니다. 다양한 종류의 데이터 모델에 대해 이해를 하고 있고, 애플리케이션 요구사항에 가장 적합한 모델을 찾아서 개발을 해야 합니다.
데이터 모델에 따라 어떤 종류의 사용법은 쉽고 어떤 동작은 지원하지 않습니다.</description>
    </item>
    
    <item>
      <title>Git 명령어 요약 정리 (Cheat sheet)</title>
      <link>https://eoriented.github.io/post/git-cheat-sheet/</link>
      <pubDate>Sat, 27 Jul 2019 17:06:56 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/git-cheat-sheet/</guid>
      <description>git은 오늘날 가장 많이 사용하는 버전 관리 시스템 중 하나입니다. 오늘은 git의 자주 사용하는 명령어에 대해서 살펴보고자 합니다. 먼저 각 명령어에 따른 흐름이 어떻게 변하는지 다음 그림을 통해 알 수 있습니다.
  생성하기   새로운 로컬 저장소를 생성하기</description>
    </item>
    
    <item>
      <title>신뢰성, 확장성, 유지보수성을 가진 애플리케이션</title>
      <link>https://eoriented.github.io/post/reliable-scalable-and-maintainable-applications/</link>
      <pubDate>Sun, 14 Jul 2019 18:31:01 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/reliable-scalable-and-maintainable-applications/</guid>
      <description>Compute-intensive(계산 중심) vs Data-intensive(데이터 중심) 과거에는 CPU 성능이 애플리케이션을 제한하는 요소였지만 오늘날에는 그렇지 않습니다. 최근에는 데이터의 양, 데이터의 복잡도, 데이터의 변화 속도가 애플리케이션을 제한하는 요소가 되었습니다. 이렇게 애플리케이션에서 사용하는 데이터의 특징에 맞춰서 설계를 해야 합니다. 그래서 이러한 애플리케이션을 Data-intensive application(데이터 중심 애플리케이션)이라고 합니다.</description>
    </item>
    
    <item>
      <title>딥러닝(Deep Learning) 살펴보기 2탄</title>
      <link>https://eoriented.github.io/post/deep-learning-overview-2/</link>
      <pubDate>Sat, 07 Oct 2017 15:00:00 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/deep-learning-overview-2/</guid>
      <description>지난 포스트에 Deep learning 살펴보기 1탄을 통해 딥러닝의 개요와 뉴럴 네트워크, 그리고 Underfitting의 문제점과 해결방법에 관해 알아보았습니다. 그럼 오늘은 이어서 Deep learning에서 학습이 느린 문제점을 어떠한 방식으로 해결하고 연구하고 있는지 한번 알아보도록 하겠습니다.
Neural Network 복습 기존의 뉴럴 네트워크는 weight parameter들을 최적화(optimize)를 하기 위하여 Gradient Descent 방법을 사용했습니다.</description>
    </item>
    
    <item>
      <title>딥러닝(Deep Learning) 살펴보기 1탄</title>
      <link>https://eoriented.github.io/post/deep-learning-overview-1/</link>
      <pubDate>Sun, 01 Oct 2017 13:04:48 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/deep-learning-overview-1/</guid>
      <description>이번 포스트에서는 Deep learning에 대해 살펴볼 예정입니다. 이번 포스트는 Reference에 있는 내용을 정리한 것입니다. Deep learning은 대세가 되었습니다. 주변에서 딥러닝이라는 이야기가 많이 들립니다. 딥러닝이란 무엇인지 알아보도록 하겠습니다. 오늘날 딥러닝을 가능하게 해준 3가지가 있습니다.
 빅데이터  데이터가 많은게 깡패입니다.</description>
    </item>
    
    <item>
      <title>Oozie Workflow Pattern 3</title>
      <link>https://eoriented.github.io/post/oozie-workflow-pattern-3/</link>
      <pubDate>Sun, 01 Oct 2017 11:35:48 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/oozie-workflow-pattern-3/</guid>
      <description>이전 포스트에는 Oozie의 워크플로우 패턴중 하나인 fork-and-join 패턴에 관해서 알아보았습니다. 이번 시간에는 워크플로우 내에 액션의 결과에 조건을 주어 다음 액션을 어디로 수행할 것인지 결정할 수 있는 capture-and-decide 패턴에 대해 알아보도록 하겠습니다.
capture-and-decide pattern capture-and-decide 패턴이라고 하니까 약간 어려운 느낌이 있지만 실제로는 간단한 패턴이죠.</description>
    </item>
    
    <item>
      <title>Oozie Workflow Pattern - 2</title>
      <link>https://eoriented.github.io/post/oozie-workflow-pattern-2/</link>
      <pubDate>Sat, 30 Sep 2017 14:19:26 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/oozie-workflow-pattern-2/</guid>
      <description>이전 포스트에는 Oozie의 워크플로우 패턴중 하나인 Point-to-Point 패턴에 관해서 알아보았습니다. 이번 시간에는 fork-and-join 패턴에 대해 알아보도록 하겠습니다.
fork-and-join pattern fork-and-join 패턴은 Fan-out 패턴이라고도 합니다. 이와 같은 형태의 워크플로우는 여러 액션들이 나누어 실행한 후 해당 액션들이 다 정상적으로 완료된 후 다음 액션을 수행해야하는 경우 많이 사용합니다.</description>
    </item>
    
    <item>
      <title>Oozie Workflow Pattern - 1</title>
      <link>https://eoriented.github.io/post/oozie-workflow-pattern-1/</link>
      <pubDate>Sun, 24 Sep 2017 15:06:15 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/oozie-workflow-pattern-1/</guid>
      <description>Oozie가 무엇인지 궁금한 분들을 Apache Oozie 소개라는 이전 포스트를 참고하시기 바랍니다. 일반적으로 Oozie에서 많이 사용되는 워크플로우 패턴에 대해서 알아봅시다.
순차적 액션 수행 (Point-to-Point Pattern) 가장 간단한 형태로 수행하는 워크플로우 형태가 되겠습니다. 말그대로 순차적으로 액션을 수행할 때 사용합니다.</description>
    </item>
    
    <item>
      <title>Apache Oozie 소개</title>
      <link>https://eoriented.github.io/post/introduction-to-oozie/</link>
      <pubDate>Sat, 23 Sep 2017 23:15:56 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/introduction-to-oozie/</guid>
      <description>Oozie 개요 Oozie는 정식 홈페이지에 나와 있듯이 Hadoop ecosystem에서 사용하는 Workflow Scheduler(혹은 orchestration) 프레임워크입니다. Oozie에서 제공하는 기능은 크게 아래의 3가지와 같습니다.
 Scheduling  특정 시간에 액션 수행 주기적인 간격 이후에 액션 수행 이벤트가 발생하면 액션 수행   Coordinating  이전 액션이 성공적으로 끝나면 다음 액션 시작   Managing  액션이 성공하거나 실패했을 때 이메일 발송 액션 수행시간이나 액션의 단계를 저장    Oozie 용어  Action  우지에서 실행할 수 있는 하나의 작업 단위 MapReduce 작업, Spark 작업, Shell script 등   Workflow  Action들의 제어와 의존 관계를 DAG(Directed acyclic graph) 표현   Coordinator  Data sets과 Workflow를 실행하는 스케줄을 정의   Bundle  코디네이터의 모임    Oozie Architecture  우지는 Client-Server Model의 형태입니다.</description>
    </item>
    
    <item>
      <title>의사 결정 트리(Decision Tree)</title>
      <link>https://eoriented.github.io/post/decision-tree/</link>
      <pubDate>Mon, 22 Jun 2015 16:59:44 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/decision-tree/</guid>
      <description>의사 결정 트리는 분류(Classification) 기술 중 가장 일반적으로 사용되는 방법입니다. 의사 결정 트리의 개념이 익숙하진 않겠지만 대표적으로 예를 들을 수 있는 것이 바로 스무고개라는 게임입니다. 스무고개는 총 20개의 질문만 허락되며, 그에 대한 답변으로 ‘예’ 혹은 ‘아니오’로만 대답하여서 추측하여 답에 도달하는 게임이죠.</description>
    </item>
    
    <item>
      <title>gcc로 컴파일하는 방법</title>
      <link>https://eoriented.github.io/post/how-to-compile-using-gcc/</link>
      <pubDate>Fri, 15 May 2009 10:36:10 +0900</pubDate>
      <author>eoriented@gmail.com (eoriented)</author>
      <guid>https://eoriented.github.io/post/how-to-compile-using-gcc/</guid>
      <description>1. gcc 동작 과정   gcc
원래는 GNU C Compiler를 의미 했지만 1999년부터 GNU Compiler Collection을 의미한다.
  gcc가 실행시키는 프로그램
         cpp 전처리기   cc1 컴파일러   as 어셈블러   ld 링커    1) 전처리 단계</description>
    </item>
    
  </channel>
</rss>